const express = require("express");
const { check, query } = require("express-validator");
const { Op, sequelize } = require("sequelize");
const router = express.Router();
const { requireAuth } = require("../../utils/auth");
const { handleValidationErrors } = require("../../utils/validation");
const {
  Spot,
  Review,
  SpotImage,
  User,
  ReviewImage,
  Booking,
} = require("../../db/models");

const formatAmericanDate = (date) => {
  const formattedDate = new Date(date);
  const month = formattedDate.getMonth() + 1;
  const day = formattedDate.getDate();
  const year = formattedDate.getFullYear();
  const hours = formattedDate.getHours();
  const minutes = formattedDate.getMinutes();
  const sec = formattedDate.getSeconds();
  return `${month}/${day}/${year} ${hours}:${minutes}:${sec}`;
};

const checkQuery = [
  query("page")
    .optional()
    .isInt({ min: 1 })
    .withMessage("Page must be greater than or equal to 1"),
  query("size")
    .optional()
    .isInt({ min: 1 })
    .withMessage("Page must be greater than or equal to 1"),
  query("maxLat")
    .optional()
    .isFloat({ min: -90, max: 90 })
    .withMessage("Maximum latitude is invalid"),
  query("minLat")
    .optional()
    .isFloat({ min: -90, max: 90 })
    .withMessage("Minimum latitude is invalid"),
  query("minLng")
    .optional()
    .isFloat({ min: -180, max: 180 })
    .withMessage("Minimum longitude is invalid"),
  query("maxLng")
    .optional()
    .isFloat({ min: -180, max: 180 })
    .withMessage("Maximum longitude is invalid"),
  query("maxPrice")
    .optional()
    .isFloat({ min: 0 })
    .withMessage("Maximum price must be greater than or equal to 0"),
  query("minPrice")
    .optional()
    .isFloat({ min: 0 })
    .withMessage("Minimum price must be greater than or equal to 0"),
];

const reviewCheckMW = (req, res, next) => {
  let { review, stars } = req.body;

  if (!review || isNaN(stars) || stars < 1 || stars > 5) {
    return res.status(400).json({
      message: "Bad Request", // (or "Validation error" if generated by Sequelize),
      errors: {
        review: "Review text is required",
        stars: "Stars must be an integer from 1 to 5",
      },
    });
  }
  next();
};

router.get("/", checkQuery, handleValidationErrors, async (req, res) => {
  let { page, size, minLat, maxLat, minLng, maxLng, minPrice, maxPrice } =
    req.query;

  page = parseInt(page) || 1;
  size = parseInt(size) || 20;

  if (page > 10) page = 10;
  if (size > 20) size = 20;

  let pagObj = {
    limit: size,
    offset: size * (page - 1),
  };

  let searchObj = {
    where: {},
  };

  if (minLat && maxLat) {
    searchObj.where.lat = { [Op.between]: [minLat, maxLat] };
  } else if (minLat) {
    searchObj.where.lat = { [Op.gte]: minLat };
  } else if (maxLat) {
    queryObj.where.lat = { [Op.lte]: maxLat };
  }

  if (minLng && maxLng) {
    searchObj.where.lng = { [Op.between]: [minLng, maxLng] };
  } else if (minLng) {
    searchObj.where.lng = { [Op.gte]: minLng };
  } else if (maxLng) {
    searchObj.where.lng = { [Op.lte]: maxLng };
  }

  if (minPrice && maxPrice) {
    searchObj.where.price = { [Op.between]: [minPrice, maxPrice] };
  } else if (minPrice) {
    searchObj.where.price = { [Op.gte]: minPrice };
  } else if (maxPrice) {
    searchObj.where.price = { [Op.lte]: maxPrice };
  }

  let spots = await Spot.findAll({
    ...pagObj,
    ...searchObj,
  });

  for (let spot of spots) {
    let sum = 0;
    let reviews = await Review.findAll({
      where: { spotId: spot.id },
    });
    for (let review of reviews) {
      sum += review.stars;
    }
    let average;
    if (reviews.length > 0) {
      average = sum / reviews.length;
    } else {
      average = 0;
    }
    spot.avgRating = average;
    let previewImage = await SpotImage.findOne({
      where: { spotId: spot.id, preview: true },
      attributes: ["url"],
    });
    spot.previewImage = previewImage;
  }
  //    // Calculate average rating for the spot

  //  // Fetch preview image URL for the spot

  let fixed = spots.map((spot) => {
    return {
      id: spot.id,
      ownerId: spot.ownerId,
      address: spot.address,
      city: spot.city,
      state: spot.state,
      country: spot.country,
      lat: +spot.lat,
      lng: +spot.lng,
      name: spot.name,
      description: spot.description,
      price: +spot.price,
      createdAt: formatAmericanDate(spot.createdAt),
      updatedAt: formatAmericanDate(spot.updatedAt),
      avgRating: spot.avgRating || 0,
      previewImage: spot.previewImage ? spot.previewImage.url : null,
    };
  });
  //  // Add avgRating and previewImage to the spot object
  //  spot.previewImage = previewImage;
  //  }

  res.status(200).json({ Spots: fixed, page: +page, size: +size });
});

router.delete("/:spotId", requireAuth, async (req, res) => {
  let { spotId } = req.params;
  let spot = await Spot.findByPk(spotId);

  if (!spot) {
    return res.status(404).json({ message: "Spot couldn't be found" });
  }

  if (spot.ownerId !== req.user.id) {
    return res.status(403).json({ message: "Forbidden" });
  }

  await spot.destroy();

  return res.status(200).json({ message: "Successfully deleted" });
});

router.get("/current", requireAuth, async (req, res) => {
  // try {
  // Get the currently logged-in user's ID
  let userId = req.user.id;

  // Find all spots owned by the currently logged-in user
  let spots = await Spot.findAll({
    where: {
      ownerId: userId,
    },
  });
  for (let spot of spots) {
    let sum = 0;
    let reviews = await Review.findAll({
      where: { spotId: spot.id },
    });
    for (let review of reviews) {
      sum += review.stars;
    }
    let average;
    if (reviews.length > 0) {
      average = sum / reviews.length;
    } else {
      average = 0;
    }
    spot.avgRating = average;
    let previewImage = await SpotImage.findOne({
      where: { spotId: spot.id, preview: true },
      attributes: ["url"],
    });
    spot.previewImage = previewImage;
  }
  //    // Calculate average rating for the spot

  //  // Fetch preview image URL for the spot

  let fixed = spots.map((spot) => {
    return {
      id: spot.id,
      ownerId: spot.ownerId,
      address: spot.address,
      city: spot.city,
      state: spot.state,
      country: spot.country,
      lat: +spot.lat,
      lng: +spot.lng,
      name: spot.name,
      description: spot.description,
      price: +spot.price,
      createdAt: formatAmericanDate(spot.createdAt),
      updatedAt: formatAmericanDate(spot.updatedAt),
      avgRating: +spot.avgRating || 0,
      previewImage: spot.previewImage ? spot.previewImage.url : null,
    };
  });

  res.status(200).json({ Spots: fixed });
  // } catch (error) {
  //   console.error("Error retrieving spots:", error);
  //   res.status(500).json({ message: "Internal server error" });
  // }
});
const validateSpot = (req, res, next) => {
  let { address, city, state, country, lat, lng, name, description, price } =
    req.body;

  if (
    !address ||
    !city ||
    !state ||
    !country ||
    !lat ||
    !lng ||
    !name ||
    !description ||
    !price ||
    price < 0 ||
    lat < -90 ||
    lat > 90 ||
    lng < -180 ||
    lng > 180
  ) {
    return res.status(400).json({
      message: "Bad Request",
      errors: {
        address: "Street address is required",
        city: "City is required",
        state: "State is required",
        country: "Country is required",
        lat: "Latitude must be within -90 and 90",
        lng: "Longitude must be within -180 and 180",
        name: "Name must be less than 50 characters",
        description: "Description is required",
        price: "Price per day must be a positive number",
      },
    });
  }
  next();
};

router.get("/:spotId", async (req, res) => {
  // try {
  let { spotId } = req.params;

  // Find the spot by its ID
  let spot = await Spot.findOne({
    where: {
      id: spotId,
    },
  });

  // If spot is not found, return 404
  if (!spot) {
    return res.status(404).json({
      message: "Spot couldn't be found",
    });
  }
  //Finding the spot owner
  let owner = await User.findByPk(spot.ownerId);

  // Calculate average rating for the spot
  let sum = 0;
  let reviews = await Review.findAll({
    where: { spotId: spot.id },
  });
  for (let review of reviews) {
    sum += review.stars;
  }
  let average;
  if (reviews.length > 0) {
    average = sum / reviews.length;
  } else {
    average = 0;
  }
  spot.avgRating = average;

  // Fetch image URL for the spot
  let spotImage = await SpotImage.findAll({
    where: { spotId: spot.id },
  });
  spot.SpotImages = spotImage;

  // Prepare the response data
  let responseData = {
    id: spot.id,
    ownerId: spot.ownerId,
    address: spot.address,
    city: spot.city,
    state: spot.state,
    country: spot.country,
    lat: +spot.lat,
    lng: +spot.lng,
    name: spot.name,
    description: spot.description,
    price: +spot.price,
    createdAt: formatAmericanDate(spot.createdAt),
    updatedAt: formatAmericanDate(spot.updatedAt),
    avgRating: spot.avgRating || 0,
    SpotImages: spot.SpotImages,
    Owner: {
      id: +spot.ownerId,
      firstName: owner.firstName,
      lastName: owner.lastName,
    },
  };

  // Return the spot with the calculated data
  res.status(200).json(responseData);
  // } catch (error) {
  //   console.error("Error retrieving spot:", error);
  //   res.status(500).json({ message: "Internal server error" });
  // }
});

router.put("/:spotId", requireAuth, validateSpot, async (req, res) => {
  let { spotId } = req.params;
  // let {userId} = req.user.id
  let { address, city, state, country, lat, lng, name, description, price } =
    req.body;

  let spot = await Spot.findByPk(spotId);

  if (!spot) {
    return res.status(404).json({
      message: "Spot couldn't be found",
    });
  }

  if (spot.ownerId !== req.user.id) {
    return res.status(403).json({
      message: "Forbidden",
    });
  }

  await spot.update({
    address,
    city,
    state,
    country,
    lat,
    lng,
    name,
    description,
    price,
  });
  let responseData = {
    id: spot.id,
    ownerId: spot.ownerId,
    address: spot.address,
    city: spot.city,
    state: spot.state,
    country: spot.country,
    lat: +spot.lat,
    lng: +spot.lng,
    name: spot.name,
    description: spot.description,
    price: +spot.price,
    createdAt: formatAmericanDate(spot.createdAt),
    updatedAt: formatAmericanDate(spot.updatedAt),
    // avgRating: spot.avgRating || 0,
    // SpotImages: spot.SpotImages,
  };
  return res.status(200).json(responseData);
});

router.post("/:spotId/images", requireAuth, async (req, res) => {
  let { spotId } = req.params;

  let { url, preview } = req.body;

  let spot = await Spot.findByPk(spotId);

  if (!spot) {
    return res.status(404).json({
      message: "Spot couldn't found",
    });
  }

  if (spot.ownerId !== req.user.id) {
    return res.status(403).json({ message: "Forbidden" });
  }

  let newImage = await SpotImage.create({
    spotId,
    url,
    preview,
  });

  return res.status(200).json({
    id: newImage.id,
    url: newImage.url,
    preview: newImage.preview,
  });
});

router.post("/", requireAuth, validateSpot, async (req, res) => {
  let { address, city, state, country, lat, lng, name, description, price } =
    req.body;
  let newSpot = await Spot.create({
    ownerId: req.user.id,
    address,
    city,
    state,
    country,
    lat,
    lng,
    name,
    description,
    price,
  });

  newSpot.createdAt = formatAmericanDate(new Date());
  newSpot.updatedAt = formatAmericanDate(new Date())

  res.status(201).json(newSpot);
});

router.get("/:spotId/reviews", async (req, res) => {
  let { spotId } = req.params;

  let spot = await Spot.findByPk(spotId);

  if (!spot) {
    return res.status(404).json({ message: "Spot couldn't be found" });
  }

  // return res.status(200).json(spot)

  let reviews = await Review.findAll({
    where: { spotId },
    include: [
      {
        model: User,
        attributes: ["id", "firstName", "lastName"],
      },
      {
        model: ReviewImage,
        attributes: ["id", "url"],
      },
    ],
  });

  let response = reviews.map((review) => ({
    id: review.id,
    userId: review.userId,
    spotId: review.spotId,
    review: review.review,
    stars: review.stars,
    createdAt: formatAmericanDate(review.createdAt),
    updatedAt: formatAmericanDate(review.updatedAt),
    User: {
      id: review.User.id,
      firstName: review.User.firstName,
      lastName: review.User.lastName,
    },
    ReviewImages: review.ReviewImages,
  }));
  res.status(200).json({ Reviews: response });
});

router.get("/:spotId/bookings", requireAuth, async (req, res) => {
  let { spotId } = req.params;
  let spot = await Spot.findByPk(spotId);

  if (!spot) {
    return res.status(404).json({
      message: "Spot couldn't be found",
    });
  }

  if (spot.ownerId === req.user.id) {
    let bookings = await Booking.findAll({
      where: { spotId },
      include: {
        model: User,
        attributes: ["id", "firstName", "lastName"],
      },
    });
    let response = {
      Bookings: bookings.map((booking) => ({
        User: {
          id: +booking.User.id,
          firstName: booking.User.firstName,
          lastName: booking.User.lastName,
        },
        id: booking.id,
        spotId: +booking.spotId,
        userId: +booking.userId,
        startDate: formatAmericanDate(booking.startDate),
        endDate: formatAmericanDate(booking.endDate),
        createdAt: formatAmericanDate(booking.createdAt),
        updatedAt: formatAmericanDate(booking.createdAt),
      })),
    };
    res.status(200).json(response);
  } else {
    let bookings = await Booking.findAll({
      where: {
        spotId,
      },
      attributes: ["spotId", "startDate", "endDate"],
    });

    let response = {
      Bookings: bookings.map((booking) => ({
        spotId: booking.spotId,
        startDate: formatAmericanDate(booking.startDate),
        endDate: formatAmericanDate(booking.endDate),
      })),
    };
    res.status(200).json(response);
  }
});

router.post(
  "/:spotId/reviews",
  requireAuth,
  reviewCheckMW,
  async (req, res) => {
    let { spotId } = req.params;
    let { review, stars } = req.body;
    let userId = req.user.id;

    let spot = await Spot.findByPk(spotId);

    if (!spot) {
      return res.status(404).json({
        message: "Spot couldn't be found",
      });
    }

    let existing = await Review.findOne({
      where: { spotId, userId },
    });

    if (existing) {
      return res
        .status(500)
        .json({ message: "User already has a review for this spot" });
    }

    let newReview = await Review.create({
      spotId,
      userId,
      review,
      stars,
    });

    res.status(201).json({
      id: +newReview.id,
      userId: +newReview.userId,
      spotId: +newReview.spotId,
      review: newReview.review,
      stars: +newReview.stars,
      createdAt: formatAmericanDate(newReview.createdAt),
      updatedAt: formatAmericanDate(newReview.updatedAt),
    });
  }
);

router.post("/:spotId/bookings", requireAuth, async (req, res) => {
  let { startDate, endDate } = req.body;
  const spotId = parseInt(req.params.spotId);
  const userId = parseInt(req.user.id);

  const spot = await Spot.findByPk(spotId);

  if (!spot) {
    return res.status(404).json({
      message: "Spot couldn't be found",
    });
  }

  if (spot.ownerId == userId) {
    return res.status(403).json({
      message: "Forbidden",
    });
  }

  const currentDate = new Date();
  const startDateCheck = new Date(startDate);
  const endDateCheck = new Date(endDate);

  if (startDateCheck < currentDate && endDateCheck <= startDateCheck) {
    return res.status(400).json({
      message: "Bad Request",
      errors: {
        startDate: "startDate cannot be in the past",
        endDate: "endDate cannot be on or before startDate",
      },
    });
  }

  if (startDateCheck < currentDate) {
    return res.status(400).json({
      message: "Bad Request",
      errors: {
        startDate: "startDate cannot be in the past",
      },
    });
  }

  if (endDateCheck <= startDateCheck) {
    return res.status(400).json({
      message: "Bad Request",
      errors: {
        endDate: "endDate cannot be on or before startDate",
      },
    });
  }

  const booking = await Booking.findOne({
    where: {
      spotId,
      [Op.and]: [
        {
          startDate: {
            [Op.lte]: endDateCheck,
          },
        },
        {
          endDate: {
            [Op.gte]: startDateCheck,
          },
        },
      ],
    },
  });

  if (booking) {
    const bookingStart = new Date(booking.startDate).getTime();
    const bookingEnd = new Date(booking.endDate).getTime();

    if (endDateCheck.getTime() == bookingStart) {
      return res.status(403).json({
        message: "Sorry, this spot is already booked for the specified dates",
        error: {
          endDate: "End date conflicts with an existing booking",
        },
      });
    }

    if (startDateCheck >= bookingStart && endDateCheck <= bookingEnd) {
      return res.status(403).json({
        message: "Sorry, this spot is already booked for the specified dates",
        errors: {
          startDate: "Start date conflicts with an existing booking",
          endDate: "End date conflicts with an existing booking",
        },
      });
    }

    if (startDateCheck >= bookingStart) {
      return res.status(403).json({
        message: "Sorry, this spot is already booked for the specified dates",
        error: {
          startDate: "Start date conflicts with an existing booking",
        },
      });
    }

    if (endDateCheck <= bookingEnd) {
      return res.status(403).json({
        message: "Sorry, this spot is already booked for the specified dates",
        error: {
          endDate: "End date conflicts with an existing booking",
        },
      });
    }

    if (startDateCheck < bookingStart && endDateCheck > bookingEnd) {
      return res.status(403).json({
        message: "Sorry, this spot is already booked for the specified dates",
        errors: {
          startDate: "Start date conflicts with an existing booking",
          endDate: "End date conflicts with an existing booking",
        },
      });
    }
  }

  const newBooking = await Booking.create({
    spotId,
    userId,
    startDate,
    endDate,
  });

  const newBookingFormatted = {
    ...newBooking.toJSON(),
    startDate: newBooking.startDate.toJSON().slice(0, 10),
    endDate: newBooking.endDate.toJSON().slice(0, 10),
    createdAt: newBooking.createdAt
      .toJSON()
      .split("T")
      .join(" ")
      .split("Z")
      .join("")
      .slice(0, 19),
    updatedAt: newBooking.updatedAt
      .toJSON()
      .split("T")
      .join(" ")
      .split("Z")
      .join("")
      .slice(0, 19),
  };

  return res.json(newBookingFormatted);
});

module.exports = router;

const express = require("express");
const router = express.Router();
const { requireAuth } = require("../../utils/auth");
const {Op} = require("sequelize")
const { Spot, Review, User, SpotImage, Booking } = require("../../db/models");

router.get("/current", requireAuth, async (req, res) => {
  let userId = req.user.id;

  let bookings = await Booking.findAll({
    where: { userId },
    include: [
      {
        model: Spot,
        attributes: [
          "id",
          "ownerId",
          "address",
          "city",
          "state",
          "country",
          "lat",
          "lng",
          "name",
          "price",
        ],
        include: {
          model: SpotImage,
          as: "previewImage",
          where: {
            preview: true,
          },
          attributes: ["url"],
          limit: 1,
        },
      },
    ],
  });
  let response = {
    Bookings: bookings.map((booking) => ({
      id: booking.id,
      spotId: booking.spotId,
      Spot: {
        id: booking.Spot.id,
        ownerId: booking.Spot.ownerId,
        address: booking.Spot.address,
        city: booking.Spot.city,
        state: booking.Spot.state,
        country: booking.Spot.country,
        lat: booking.Spot.lat,
        lng: booking.Spot.lng,
        name: booking.Spot.name,
        price: booking.Spot.price,
        previewImage: booking.Spot.previewImage[0].url,
      },
      userId: booking.userId,
      startDate: booking.startDate,
      endDate: booking.endDate,
      createdAt: booking.createdAt,
      updatedAt: booking.updatedAt,
    })),
  };

    res.status(200).json(response)
});

router.put("/:bookingId", requireAuth, async (req, res) => {
    let { bookingId } = req.params;
    let { startDate, endDate } = req.body;
    let userId = req.user.id;

    let booking = await Booking.findByPk(bookingId);

    if (!booking) {
        return res.status(404).json({message: "Booking couldn't be found"})
    }
    if (booking.userId !== userId) {
        return res.status(403).json({message: "Forbidden"})
    }

    if (new Date(booking.endDate) < new Date()) {
        return res.status(403).json({message: "Past bookings can't be modified"})
    }

    if (new Date(endDate) <= new Date(startDate) || new Date(startDate) < new Date() || !startDate || !endDate) {
        return res.status(400).json({
          message: "Bad Request", // (or "Validation error" if generated by Sequelize),
          errors: {
            startDate: "startDate cannot be in the past",
            endDate: "endDate cannot be on or before startDate",
          },
        });
    }

    let conflictingBookings = await Booking.findAll({
      where: {
        id: { [Op.ne]: bookingId }, // Exclude the current booking from conflict check
        spotId: booking.spotId,
        [Op.or]: [
          { startDate: { [Op.between]: [startDate, endDate] } },
          { endDate: { [Op.between]: [startDate, endDate] } },
        ],
      },
    });

    if (conflictingBookings.length > 0) {
        return res.status(403).json({
          message: "Sorry, this spot is already booked for the specified dates",
          errors: {
            startDate: "Start date conflicts with an existing booking",
            endDate: "End date conflicts with an existing booking",
          },
        });
    }

    await booking.update({ startDate, endDate });

    res.status(200).json({
        id: booking.id,
        spotId: booking.spotId,
        userId: booking.userId,
        startDate: booking.startDate,
        endDate: booking.endDate,
        createdAt: booking.createdAt,
        updatedAt: booking.updatedAt
    })
})

router.delete("/:bookingId", requireAuth, async (req, res) => {
    let { bookingId } = req.params;

    let booking = await Booking.findByPk(bookingId);

    if (!booking) {
        return res.status(404).json({
            message: "Booking couldn't be found"
        })
    }

    if (booking.userId !== req.user.id) {
        let spot = await Spot.findByPk(booking.spotId);
        if (!spot || spot.ownerId !== req.user.id) {
          return res.status(403).json({ message: "Forbidden" });
        }
    }

     if (new Date(booking.startDate) <= new Date()) {
       return res
         .status(403)
         .json({ message: "Bookings that have been started can't be deleted" });
     }

    await booking.destroy();

    return res.status(200).json({ message: "Successfully deleted" });
})




module.exports = router;
